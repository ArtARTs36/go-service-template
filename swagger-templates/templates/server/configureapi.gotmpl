// This file is safe to edit. Once it exists it will not be overwritten

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package http

import (
  "context"
  "crypto/tls"
  "io"
  "log/slog"
  "net/http"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/runtime/middleware"
  "github.com/go-openapi/runtime/security"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
  "github.com/artarts36/go-service-template/internal/port/http/middlewares"
)

{{ with .GenOpts }}
{{ end }}
type Configurator struct {
}

func NewConfigurator() *Configurator {
	return &Configurator{}
}

func (c *Configurator) ConfigureFlags(_ *{{.APIPackageAlias}}.{{ pascalize .Name }}API) {
  // api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func (c *Configurator) ConfigureAPI(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) http.Handler {
  // configure the api here
  api.ServeError = errors.ServeError

  api.UseSwaggerUI()
  // To continue using redoc as your UI, uncomment the following line
  // api.UseRedoc()

  {{ range .Consumes }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Consumer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Consumer = runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
    return errors.NotImplemented("{{.Name}} consumer has not yet been implemented")
  })
    {{- end }}
  {{- end }}
  {{ range .Produces }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Producer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Producer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
    return errors.NotImplemented("{{.Name}} producer has not yet been implemented")
  })
    {{- end }}
  {{- end}}
  {{ range .SecurityDefinitions }}
    {{- if .IsBasicAuth }}
  // Applies when the Authorization header is set with the Basic scheme
  if api.{{ pascalize .ID }}Auth == nil {
  api.{{ pascalize .ID }}Auth = func(user string, pass string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return nil, errors.NotImplemented("basic auth  ({{ .ID }}) has not yet been implemented")
    }
  }
    {{- else if .IsAPIKeyAuth }}
  // Applies when the "{{ .Name }}" {{ .Source }} is set
  if api.{{ pascalize .ID }}Auth == nil {
  api.{{ pascalize .ID }}Auth = func(token string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return nil, errors.NotImplemented("api key auth ({{ .ID }}) {{.Name}} from {{.Source}} param [{{ .Name }}] has not yet been implemented")
    }
  }
    {{- else if .IsOAuth2 }}
    if api.{{ pascalize .ID }}Auth == nil {
    api.{{ pascalize .ID }}Auth = func(token string, scopes []string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return nil, errors.NotImplemented("oauth2 bearer auth ({{ .ID }}) has not yet been implemented")
    }
  }
    {{- end }}
  {{- end }}
  {{- if .SecurityDefinitions }}

  // Set your custom authorizer if needed. Default one is security.Authorized()
  // Expected interface runtime.Authorizer
  //
  // Example:
  // api.APIAuthorizer = security.Authorized()
  {{- end }}
  {{- $package := .Package }}
  {{- $apipackagealias := .APIPackageAlias }}
  {{- range .Operations }}
    {{- if .HasFormParams }}
  // You may change here the memory limit for this multipart form parser. Below is the default (32 MB).
  // {{ if ne .Package $package }}{{ .PackageAlias }}{{ else }}{{ $apipackagealias }}{{ end }}.{{ pascalize .Name }}MaxParseMemory = 32 << 20
    {{- end }}
  {{- end }}

  api.PreServerShutdown = func() {  }
  api.ServerShutdown = func() {  }

  return c.SetupGlobalMiddleware(api.Serve(c.SetupMiddlewares))
}

// ConfigureTLS The TLS configuration before HTTPS server starts.
func (c *Configurator) ConfigureTLS(_ *tls.Config) {
  // Make all necessary changes to the TLS configuration here.
}

// ConfigureServer As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func (c *Configurator) ConfigureServer(_ *http.Server, _, _ string) {
}

// SetupMiddlewares The middleware configuration is for the handler executors.
// These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func (c *Configurator) SetupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// SetupGlobalMiddleware The middleware configuration happens before anything.
// This middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func (c *Configurator) SetupGlobalMiddleware(handler http.Handler) http.Handler {
	return middlewares.CORS(middlewares.NewLog(handler))
}
