package main

{{ $name := .Name }}
{{ $operations := .Operations }}
import (
    "log/slog"
    "os"

	"github.com/go-openapi/loads"

	"github.com/artarts36/go-service-template/internal/port/http/generated/restapi"
	apiOperations "github.com/artarts36/go-service-template/internal/port/http/generated/restapi/operations"

	"github.com/artarts36/go-service-template/internal/port/http/app"
	"github.com/artarts36/go-service-template/internal/port/http"
)

func main() {
	swaggerSpec, err := loads.Analyzed({{ .APIPackage }}.SwaggerJSON, "")
	if err != nil {
		slog.Error(err.Error())
		os.Exit(1)
	}

    cfg, err := app.InitConfig("{{ upper .Name }}_")
    if err != nil {
        slog.Error(err.Error())
        os.Exit(1)
    }

    srv, err := app.New(cfg)
    if err != nil {
		slog.Error(err.Error())
		os.Exit(1)
    }

	api := apiOperations.New{{ pascalize .Name }}API(swaggerSpec)

	{{range .Operations}}
    api.{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(srv.{{ pascalize .Name }}Handler)
    {{- end}}
    api.ServerShutdown = srv.OnShutdown
	server := {{ .APIPackage }}.NewServer(api, http.NewConfigurator())
	defer func() {
		shutdownErr := server.Shutdown()
		if shutdownErr != nil {
			slog.Error(shutdownErr.Error())
		}
	}()

	server.ConfigureAPI()

	server.Port = cfg.HTTP.Port
	if serveErr := server.Serve(); serveErr != nil {
		slog.Error(serveErr.Error())
	}
}
